{"version":3,"sources":["libs/scroll.ts"],"names":[],"mappings":"AAAA;IAME,wBAAY,GAAG,EAAE,EAAE,EAAE,OAAO;QAC1B,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC1C,IAAM,cAAc,GAAG;YACrB,IAAI,EAAE,IAAI;YACV,UAAU,EAAE,KAAK;YACjB,SAAS,EAAE,CAAC;YACZ,IAAI,EAAE,IAAI;SACb,CAAC;QACF,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QACtD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAA;QAC7B,IAAI,CAAC,KAAK,EAAE,CAAA;IACZ,CAAC;IACD,8BAAK,GAAL;QAAA,iBAmBC;QAlBC,IAAM,QAAQ,GAAG,UAAU,OAAO,EAAE,QAAQ;YAA3B,iBAWhB;YAVC,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK;gBACnB,IAAG,KAAK,CAAC,cAAc,EAAE;oBACvB,KAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;oBAC3B,IAAG,KAAI,CAAC,IAAI,EAAE;wBACZ,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;qBACjC;iBACF;qBAAI;oBACH,KAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;iBAC7B;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAA;QAED,IAAI,CAAC,EAAE,GAAG,IAAI,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;QACrE,IAAI,CAAC,EAAE,CAAC,aAAa,GAAG,GAAG,CAAA;QAC3B,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,UAAA,OAAO;YACtB,KAAI,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IACD,gCAAO,GAAP;QACI,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;IACzB,CAAC;IACH,qBAAC;AAAD,CA1CA,AA0CC,IAAA","file":"scroll.js","sourcesContent":["class ScrollObserver {\r\n  els:any\r\n  cb:any\r\n  options:any\r\n  once:boolean\r\n  io:any\r\n  constructor(els, cb, options) {\r\n    this.els = document.querySelectorAll(els);\r\n    const defaultOptions = {\r\n      root: null,\r\n      rootMargin: \"0px\",\r\n      threshold: 0,\r\n      once: true\r\n  };\r\n  this.cb = cb;\r\n  this.options = Object.assign(defaultOptions, options);\r\n  this.once = this.options.once\r\n  this._init()\r\n  }\r\n  _init() {\r\n    const callback = function (entries, observer) {\r\n      entries.forEach(entry => {\r\n        if(entry.isIntersecting) {\r\n          this.cb(entry.target, true)\r\n          if(this.once) {\r\n            observer.unobserve(entry.target)\r\n          }\r\n        }else{\r\n          this.cb(entry.target, false)\r\n        }\r\n      });\r\n    }\r\n\r\n    this.io = new IntersectionObserver(callback.bind(this), this.options)\r\n    this.io.POLL_INTERVAL = 100\r\n    this.els.forEach(element => {\r\n      this.io.observe(element)\r\n    });\r\n  }\r\n  destroy() {\r\n      this.io.disconnect();\r\n  }\r\n}"]}